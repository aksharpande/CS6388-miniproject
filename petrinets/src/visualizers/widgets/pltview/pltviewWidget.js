/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Aug 09 2022 19:05:48 GMT+0000 (Coordinated Universal Time).
 */

define(['./plotly-2.14.0.min', 'css!./styles/pltviewWidget.css'], function (plotly) {
    'use strict';

    var WIDGET_CLASS = 'pltview';

    function pltviewWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    pltviewWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header
        this._el.append('<div id="plot-container" style="width: 100%;height=100%;"></div>');

        this._plotContainer = null;
        this._plotTrackNumber = 0;
    };

    pltviewWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    pltviewWidget.prototype.prototype.plotData = function (data) {
        if(!this._plotContainer) {
            this._plotContainer = document.getElementById('plot-container');
        }
        if (data) {
            this._plotTrackNumber = data.length;
            Plotly.newPlot(this._plotContainer, data);
        } else if(this._plotTrackNumber > 0) {
            let traces = [];
            for(let i=0; i < this._plotTrackNumber; i+=1) {
                traces.push(i);
            }
            Plotly.deleteTraces(this._plotContainer, traces);
            this._plotTrackNumber =0;
            $(this._plotContainer).empty();
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    pltviewWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    pltviewWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    pltviewWidget.prototype.destroy = function () {
    };

    pltviewWidget.prototype.onActivate = function () {
        this._logger.debug('pltviewWidget has been activated');
    };

    pltviewWidget.prototype.onDeactivate = function () {
        this._logger.debug('pltviewWidget has been deactivated');
    };

    return pltviewWidget;
});
